#  ansible-playbook -i locallab.ini -e "pr_device_name=evpn-4101" pb_config_spine_uplinks.yml
---
- name: "10000 - GATHER EXPECTED CONNECTIONS FROM NAUTOBOT"
  hosts: "localhost"
  gather_facts: False
  connection: "local"
  tasks:
    - name: "10005 - FAIL PLAYBOOK IF VALID PR_DEVICE_NAME EXTRA VAR IS NOT PASSED"
      ansible.builtin.assert:
        that:
          - pr_device_name is defined
          - pr_device_name != ""
        msg: "Playbook must be ran with extra var pr_device_name set to the name of the device."

    - name: "10010 - RUN GRAPHQL QUERY"
      ansible.builtin.include_role:
        name: "ntc_internal_collection.nautobot_graphql_query.nautobot_device_info"
      vars:
        filename: "templates/graphql/query_get_devices.j2"
        device: "{{ pr_device_name }}"

    - name: "10015 - GET EXPECTED DEVICE NEIGHBORS"
      nautobot_get_spines:
        device: "{{ pr_device_name }}"
        query_results: "{{ nautobot_graphql_results }}"
      register: "nautobot_info"
      delegate_to: localhost

    - name: "10020 - SET ENABLE_INTERFACES VAR"
      block:
        - name: "10021 - SET VAR"
          ansible.builtin.set_fact:
            enable_interfaces: "{{ nautobot_info['enable_interfaces'] }}"
          failed_when: "nautobot_info['enable_interfaces'] | dict2items | length == 0"
      
      rescue:
        - name: "10022 - SET JENKINS ARTIFACTS - FAILURE"
          ansible.builtin.set_stats:
            data:
              JENKINS_EXPORT:
                - success: False
                - slack_output: "No valid Spines detected to configure that are connected to device {{ pr_device_name }}.  Skipping playbook with no changes made."

    - name: "10025 - SET SSH JUMPHOST"
      when: nautobot_graphql_results.data.devices[0].config_context.config is defined
      ansible.builtin.set_fact:
        ssh_jumphost: "{{ nautobot_graphql_results['data']['devices'][0]['config_context']['config'].get('ssh_jumphost') }}
  
    - name: "10030 - ADD ALL SPINES FOUND AS HOSTS FOR NEXT PLAY"
      ansible.builtin.add_host:
        name:           "{{ item.key }}"
        interfaces: "{{ enable_interfaces[item.key]['interfaces'] }}"
        passvault_password_id: "{{ enable_interfaces[item.key]['passvault_password_id'] }}"
        os_type: "{{ enable_interfaces[item.key]['platform'] | determine_os() }}"
        ssh_jumphost: "{{ ssh_jumphost | default('')  }}"
        ansible_network_os: "{{ enable_interfaces[item.key]['platform'] | determine_os() | normalize_os() }}"
        groups: "spine_switches"
      loop: "{{ enab }}"
      changed_when: False
      when: "enable_interfaces is defined"

- name: "20000 - ENABLE INTERFACES ON EACH SPINE"
  hosts: "spine_switches"
  gather_facts: False
  vars_files: "common/default_vars.yml"
  connection: "network_cli"
  tasks:
    - name: "20005 - CONFIGURE INTERFACES"
      block:
        - include_tasks: "tasks/validate_credentials.yml"

        - import_role:
            name: "config_interfaces"

        - name: "20010 - SET JENKINS ARTIFACTS - SUCCESS"
          ansible.builtin.set_stats:
            data:
              JENKINS_EXPORT:
                - success: True
                - slack_output: "Spine uplinks for device {{ pr_device_name }} have been successfully configured."
          run_once: True

      rescue:
        - name: "20011 - SET JENKINS ARTIFACTS - FAILED"
          ansible.builtin.set_stats:
            data:
              JENKINS_EXPORT:
                - success: False
                - slack_output: "There was an error configuring Spine uplinks for device {{ pr_device_name }}:\n{{ config_results['msg'] | default('No messages from the configuration task')}}"
          run_once: True



